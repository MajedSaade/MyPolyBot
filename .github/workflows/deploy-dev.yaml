          # Execute deployment script on EC2 with image as parameter
          ssh polydev "
            export DISCORD_DEV_BOT_TOKEN='${{ secrets.DISCORD_BOT_TOKEN_DEV }}'
            export DOCKERHUB_USERNAME='${{ secrets.DOCKERHUB_USERNAME }}'
            export DOCKERHUB_TOKEN='${{ secrets.DOCKERHUB_TOKEN }}'
            bash ~/deploy_script.sh '${{ inputs.image }}'
          "# .github/workflows/deploy-dev.yaml
name: Polybot Deploy Dev

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      EC2_SSH_KEY:
        required: true
      POLYBOT_EC2_HOST_DEV:
        required: true
      EC2_USERNAME:
        required: true
      DISCORD_BOT_TOKEN_DEV:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Debug Input
        run: |
          echo "=== DEBUG: Checking inputs ==="
          echo "Received image input: '${{ inputs.image }}'"
          echo "Input length: ${#'${{ inputs.image }}'}"
          if [ -z "${{ inputs.image }}" ]; then
            echo "❌ ERROR: Image input is empty!"
            exit 1
          else
            echo "✅ Image input received successfully"
          fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure SSH for Dev
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.POLYBOT_EC2_HOST_DEV }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/private_key
          chmod 600 ~/.ssh/private_key
          
          # Add EC2 host to known_hosts to avoid SSH verification prompt
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts
          
          # Create SSH config
          cat > ~/.ssh/config <<EOF
          Host polydev
            HostName $EC2_HOST
            User $EC2_USERNAME
            IdentityFile ~/.ssh/private_key
            StrictHostKeyChecking no
          EOF

      - name: Deploy Docker Compose on Dev EC2
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          DISCORD_DEV_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN_DEV }}
          IMAGE_NAME: ${{ inputs.image }}
        run: |
          # Create deployment script
          cat > deploy_script.sh <<'DEPLOY_SCRIPT'
          #!/bin/bash
          set -e
          
          echo "=== Starting deployment ==="
          echo "Debug: All environment variables:"
          env | grep -E "(IMAGE_NAME|DISCORD|DOCKERHUB)" || echo "No matching env vars found"
          echo "Image from parameter: $1"
          echo "Image from env: $IMAGE_NAME"
          
          # Use the first parameter if IMAGE_NAME is empty
          if [ -z "$IMAGE_NAME" ] && [ -n "$1" ]; then
              IMAGE_NAME="$1"
              echo "Using image from parameter: $IMAGE_NAME"
          fi
          
          if [ -z "$IMAGE_NAME" ]; then
              echo "ERROR: IMAGE_NAME is empty!"
              exit 1
          fi
          
          echo "Final image name: $IMAGE_NAME"
          
          # Remove existing repo directory if it exists
          echo "Removing existing repo directory if it exists..."
          rm -rf ~/MyPolyBot
          
          # Clone the repository
          echo "Cloning MyPolyBot repo..."
          git clone --branch feature/containerization https://github.com/MajedSaade/MyPolyBot.git ~/MyPolyBot
          
          # Change to repo directory
          cd ~/MyPolyBot || { echo "ERROR: Failed to change to repo directory"; exit 1; }
          
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              # Remove old docker packages
              sudo apt-get remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
              
              # Update package index
              sudo apt-get update
              
              # Install prerequisites
              sudo apt-get install -y \
                  ca-certificates \
                  curl \
                  gnupg \
                  lsb-release
              
              # Add Docker's official GPG key
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              
              # Set up repository
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              
              # Install Docker Engine
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              
              # Add current user to docker group
              sudo usermod -aG docker $USER
              
              # Start and enable Docker
              sudo systemctl start docker
              sudo systemctl enable docker
          else
              echo "Docker is already installed"
          fi
          
          # Verify Docker Compose is available
          if ! docker compose version &> /dev/null; then
              echo "ERROR: Docker Compose is not available"
              exit 1
          fi
          
          # Create .env file
          echo "Creating .env file..."
          cat > .env <<EOL
          IMG_NAME=$IMAGE_NAME
          ENVIRONMENT=development
          DISCORD_DEV_BOT_TOKEN=$DISCORD_DEV_BOT_TOKEN
          YOLO_URL=http://10.0.1.90:8081/predict
          OLLAMA_URL=http://10.0.0.136:11434/api/chat
          STATUS_SERVER_PORT=8443
          EOL
          
          echo "Environment file created:"
          cat .env
          
          # Login to Docker Hub
          echo "Logging into Docker Hub..."
          echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
          
          # Stop existing containers
          echo "Stopping existing containers..."
          docker compose -f docker-compose.dev.yaml down --remove-orphans 2>/dev/null || true
          
          # Pull latest images
          echo "Pulling Docker images..."
          docker compose -f docker-compose.dev.yaml pull
          
          # Start services
          echo "Starting services..."
          docker compose -f docker-compose.dev.yaml up -d --remove-orphans
          
          # Verify deployment
          echo "Verifying deployment..."
          sleep 10
          docker compose -f docker-compose.dev.yaml ps
          
          echo "=== Deployment completed successfully ==="
          DEPLOY_SCRIPT
          
          # Make script executable and transfer it
          chmod +x deploy_script.sh
          
          # Copy script to EC2 and execute
          scp -i ~/.ssh/private_key deploy_script.sh ${{ secrets.EC2_USERNAME }}@${{ secrets.POLYBOT_EC2_HOST_DEV }}:~/
          
          # Execute deployment script on EC2
          ssh polydev "
            export IMAGE_NAME='${{ inputs.image }}'
            export DISCORD_DEV_BOT_TOKEN='${{ secrets.DISCORD_BOT_TOKEN_DEV }}'
            export DOCKERHUB_USERNAME='${{ secrets.DOCKERHUB_USERNAME }}'
            export DOCKERHUB_TOKEN='${{ secrets.DOCKERHUB_TOKEN }}'
            bash ~/deploy_script.sh
          "

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/private_key
          rm -f deploy_script.sh