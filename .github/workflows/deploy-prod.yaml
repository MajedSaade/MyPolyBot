name: Polybot Deploy Prod

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      EC2_SSH_KEY:
        required: true
      POLYBOT_EC2_HOST:
        required: true
      EC2_USERNAME:
        required: true
      DISCORD_BOT_TOKEN_PROD:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.POLYBOT_EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment directory and copy files
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.POLYBOT_EC2_HOST }} "rm -rf ~/polybot-deploy/otel-collector-config.yaml && mkdir -p ~/polybot-deploy"
          scp -i ~/.ssh/id_rsa docker-compose.prod.yaml ${{ secrets.EC2_USERNAME }}@${{ secrets.POLYBOT_EC2_HOST }}:~/polybot-deploy/docker-compose.yml
          scp -i ~/.ssh/id_rsa otel-collector-config.yaml ${{ secrets.EC2_USERNAME }}@${{ secrets.POLYBOT_EC2_HOST }}:~/polybot-deploy/otel-collector-config.yaml

      - name: Deploy to EC2
        run: |
          IMG_NAME=majedsaade${{ inputs.image }}
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.POLYBOT_EC2_HOST }} << 'EOF'
           
           echo "=== System Information ==="
           cat /etc/os-release
           uname -a
           whoami
           groups
           
           echo "=== Checking existing Docker installation ==="
           which docker || echo "Docker binary not found"
           docker --version 2>&1 || echo "Docker command failed"
           sudo docker --version 2>&1 || echo "Sudo docker command failed"
           
           echo "=== Checking Docker service ==="
           sudo systemctl status docker 2>&1 || echo "Docker service not found/running"
           
           echo "=== Installing/Updating Docker ==="
           sudo apt-get update
           sudo apt-get install -y docker.io docker-compose-plugin
           
           echo "=== Post-installation checks ==="
           which docker
           docker --version 2>&1 || echo "Docker command still failed"
           
           echo "=== Starting Docker service ==="
           sudo systemctl start docker
           sudo systemctl enable docker
           
           echo "=== Docker service status after start ==="
           sudo systemctl status docker --no-pager
           
           echo "=== Docker daemon info ==="
           sudo docker info 2>&1 || echo "Docker info failed"
           
           echo "=== Docker socket permissions ==="
           ls -la /var/run/docker.sock 2>&1 || echo "Docker socket not found"
           
           echo "=== Adding user to docker group ==="
           sudo usermod -aG docker $USER
           echo "Current groups: $(groups)"
           
           echo "=== Testing Docker without sudo (will likely fail until logout/login) ==="
           docker --version 2>&1 || echo "Expected failure - user needs to logout/login for group changes"
           
           echo "=== Final Docker test with sudo ==="
           if sudo docker --version &> /dev/null && sudo docker info &> /dev/null; then
             echo "✓ Docker is working with sudo"
             DOCKER_READY=true
           else
             echo "✗ Docker is not working even with sudo"
             DOCKER_READY=false
           fi
           
           if [ "$DOCKER_READY" = false ]; then
             echo "ERROR: Docker installation failed"
             echo "=== System logs for debugging ==="
             sudo journalctl -u docker --no-pager -n 20
             exit 1
           fi
           
           # Navigate to deployment directory
           cd ~/polybot-deploy
           
           # Create environment file with image from build workflow
           cat > .env << EOL
          IMG_NAME=majedsaade${{ inputs.image }}
          ENVIRONMENT=production
          DISCORD_PROD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN_PROD }}
          AWS_BOT_S3_BUCKET=majed-bot-bucket
          AWS_REGION=us-west-2
          YOLO_URL=http://10.0.1.90:8081/predict
          OLLAMA_URL=http://10.0.0.136:11434/api/chat
          STATUS_SERVER_PORT=8443
          EOL
           
           # Debug: Verify what we're working with
           echo "=== Deployment Debug Info ==="
           echo "Image from build workflow: $IMG_NAME"
           echo "Contents of .env file:"
           cat .env
           echo "Contents of docker-compose.yml:"
           cat docker-compose.yml
           echo "=== End Debug Info ==="
           
           # Stop existing containers
           sudo docker compose down --remove-orphans || true
           
           # Force remove old otelcol container if it exists
           sudo docker rm -f polybot-deploy-otelcol-1 || true
           
           # Login to Docker Hub
           echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
           
           # Pull latest image and start services
           sudo -E docker compose pull
           sudo -E docker compose up -d
           
           # Cleanup old images
           sudo docker image prune -f
           
           echo "Deployment completed successfully!"
          EOF