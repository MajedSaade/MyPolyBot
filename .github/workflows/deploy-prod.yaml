name: Polybot Deploy Prod

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      EC2_SSH_KEY:
        required: true
      POLYBOT_EC2_HOST:
        required: true
      EC2_USERNAME:
        required: true
      DISCORD_BOT_TOKEN_PROD:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.POLYBOT_EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment directory and copy files
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.POLYBOT_EC2_HOST }} "rm -rf ~/polybot-deploy/otel-collector-config.yaml && mkdir -p ~/polybot-deploy"
          scp -i ~/.ssh/id_rsa docker-compose.prod.yaml ${{ secrets.EC2_USERNAME }}@${{ secrets.POLYBOT_EC2_HOST }}:~/polybot-deploy/docker-compose.yml
          scp -i ~/.ssh/id_rsa otel-collector-config.yaml ${{ secrets.EC2_USERNAME }}@${{ secrets.POLYBOT_EC2_HOST }}:~/polybot-deploy/otel-collector-config.yaml

      - name: Deploy to EC2
        run: |
          export IMG_NAME="${{ secrets.DOCKERHUB_USERNAME }}${{ inputs.image }}"
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.POLYBOT_EC2_HOST }} << EOF

          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y docker.io docker-compose-plugin
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker \$USER
          fi

          # Navigate to deployment directory
          cd ~/polybot-deploy

          # Create environment file with image from build workflow
          cat > .env << EOL
          IMG_NAME=${IMG_NAME}
          ENVIRONMENT=production
          DISCORD_BOT_TOKEN_PROD=${{ secrets.DISCORD_BOT_TOKEN_PROD }}
          AWS_BOT_S3_BUCKET=majed-bot-bucket
          AWS_REGION=us-west-2
          YOLO_URL=http://10.0.1.90:8081/predict
          OLLAMA_URL=http://10.0.0.136:11434/api/chat
          STATUS_SERVER_PORT=8443
          EOL

          # Debug: Verify what we're working with
          echo "=== Deployment Debug Info ==="
          echo "Image name: ${IMG_NAME}"
          echo "Contents of .env file:"
          cat .env
          echo "Contents of docker-compose.yml:"
          cat docker-compose.yml
          echo "=== End Debug Info ==="

          # Stop existing containers
          sudo docker compose down --remove-orphans || true

          # Force remove old otelcol container if it exists
          sudo docker rm -f polybot-deploy-otelcol-1 || true

          # Login to Docker Hub
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

          # Pull latest image and start services
          sudo -E docker compose pull
          sudo -E docker compose up -d

          # Cleanup old images
          sudo docker image prune -f

          echo "Deployment completed successfully!"
          EOF